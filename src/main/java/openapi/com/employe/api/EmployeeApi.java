/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package openapi.com.employe.api;

import openapi.com.employe.model.Employee;
import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.CookieValue;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-04T11:40:55.613-04:00[America/New_York]")

@Validated
@Api(value = "employee", description = "the employee API")
public interface EmployeeApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /employee : Add a new Entity
     * Add a new employee
     *
     * @param employee Create a new employee (required)
     * @return Created (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Add a new Entity", nickname = "addEmployee", notes = "Add a new employee", response = String.class, tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Created", response = String.class),
        @ApiResponse(code = 400, message = "Invalid request") })
    @RequestMapping(value = "/employee",
        produces = { "application/text" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<String> addEmployee(@ApiParam(value = "Create a new employee" ,required=true )  @Valid @RequestBody Employee employee) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /employee : Get all employees
     * Get all employees
     *
     * @return successful operation (status code 200)
     *         or Invalid request (status code 400)
     */
    @ApiOperation(value = "Get all employees", nickname = "getEmployees", notes = "Get all employees", response = Employee.class, responseContainer = "List", tags={ "employee", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Employee.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid request") })
    @RequestMapping(value = "/employee",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Employee>> getEmployees() {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"name\" : \"John\", \"id\" : 10, \"age\" : 25 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
